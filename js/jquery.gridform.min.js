/** jquery.gridform v0.4 alpha | (c) Gunnar Thies, 2014 | MIT-License */
var gridform=gridform||{};(function($){gridform.forms={};gridform.types={};gridform.form=function(settings){return this.init(settings);};gridform.form.prototype={settings:null,fieldsById:{},renderedAtTarget:null,rendered:null,fieldCount:null,defaultSettings:{debug:false,mode:'edit',labelType:'inline',labelAlign:'right',showTooltipInstantly:false,tooltipOrientation:"bottom",successIsGreen:false,useFontAwesome:false,markMandatoryFields:true,icon_success:'glyphicon glyphicon-ok',icon_error:'glyphicon glyphicon-remove',icon_warning:'glyphicon glyphicon-warning-sign',icon_waiting:'glyphicon glyphicon-refresh',language:{'mandatoryField':'This is a mandatory field','loading':'Loading ...','selectPlaceholder':'-',},dimensions:{},},init:function(userSettings){this.settings=$.extend({},this.defaultSettings,userSettings);return this;},render:function(target,debugOptions){this.fieldCount=0;this.rendered=0;this.fieldsById={};if(typeof target==="object"){if(target.selector===undefined)
return false;else
target=target.selector;}
if(target!==undefined&&$(target).length!==1)
return false;this.settings.target=(target!==undefined)?target:this.settings.target;if($(this.settings.target).length!==1)
return false;$(this.renderedAtTarget).html("");this.rendered+=1;this.renderedAtTarget=this.settings.target;var html=this.__buildTable(debugOptions);$(this.settings.target).html(html);this.__buildContents(debugOptions);this.setData(this.settings.record);$(gridform.forms[this.settings.name]).trigger("rendered",[{'rendered':this.rendered}]);return this;},__buildTable:function(debugOptions){this.cols=0;this.rows=0;var fields={};this.focusOnField=null;for(var x in this.settings.fields){var splitting=x.split("_");var r=parseInt(splitting[0],10);var c=parseInt(splitting[1],10);if(isNaN(c)||isNaN(r)){console.error("The field "+this.settings.fields[x].id+" is missing correct row and col parameter!");continue;}
this.cols=(c>this.cols)?c:this.cols;this.rows=(r>this.rows)?r:this.rows;this.settings.fields[x].row=r;this.settings.fields[x].col=c;if(this.fieldsById[this.settings.fields[x].id]!==undefined){console.error("The id '"+this.settings.fields[x].id+"' is already taken, the field is deleted from the grid!");delete this.settings.fields[x];}else{this.fieldsById[this.settings.fields[x].id]=this.settings.fields[x];if(this.settings.fields[x].hasFocus===true){if(this.focusOnField===null){this.focusOnField=this.settings.fields[x].id;}else{console.error("Focus is already configured for field '"+this.focusOnField+"'.");}}
if(gridform.types[this.settings.fields[x].type]!==undefined&&gridform.types[this.settings.fields[x].type].containsData===true){this.fieldCount++;}}}
var spannedCells={};var showCellNames=false;if(debugOptions!==undefined&&debugOptions.showCellNames===true){showCellNames=true;}
var labelAlign='left';if(this.settings.labelAlign==="right"){labelAlign="right";}else if(this.settings.labelAlign==="left"){labelAlign="left";}
var html='<table class="gridform" border=0 ><tbody>';if(this.settings.labelType==="inline"){html+='<tr>';for(var c=1;c<=this.cols;c++){var labelWidth='';var contentWidth='';if(this.settings.dimensions['col_'+c]!==undefined){labelWidth=(this.settings.dimensions['col_'+c].labelWidth!==undefined)?'width:'+this.settings.dimensions['col_'+c].labelWidth:'';contentWidth=(this.settings.dimensions['col_'+c].contentWidth!==undefined)?'width:'+this.settings.dimensions['col_'+c].contentWidth:'';}
html+='<td style="'+labelWidth+'"></td>';html+='<td style="'+contentWidth+'"></td>';}
html+='</tr>';for(var r=1;r<=this.rows;r++){html+='<tr>';for(var c=1;c<=this.cols;c++){var rc=r+'_'+c;if(this.settings.fields[rc]===undefined){if(spannedCells[rc]!==undefined){continue;}
html+='<td data-id="'+rc+'" class="gridform_content" colspan="2">';if(showCellNames)
html+=rc;html+='</td>';}else{if(spannedCells[rc]!==undefined){console.error("The field '"+this.settings.fields[rc].id+"' cannot be placed at '"+rc+"'. This cell is colspanned by field '"+spannedCells[rc]+"'");continue;}
var colspan=1;if(this.settings.fields[rc].colspan!==undefined){colspan=parseInt(this.settings.fields[rc].colspan,10);}
var rowspan=1;if(this.settings.fields[rc].rowspan!==undefined){rowspan=parseInt(this.settings.fields[rc].rowspan,10);}
for(var x=r;x<(r+rowspan);x++){for(var y=c;y<c+colspan;y++){if(this.settings.debug)
console.log("The cell "+x+'_'+y+" is filled by field '"+this.settings.fields[rc].id+"'");spannedCells[x+'_'+y]=this.settings.fields[rc].id;}}
colspan=(colspan*2)-1;var labelAllowed=(gridform.types[this.settings.fields[rc].type]!==undefined&&gridform.types[this.settings.fields[rc].type].labelAllowed===false)?false:true;if(this.settings.fields[rc].label===undefined||labelAllowed===false){colspan++;html+='<td data-id="'+rc+'" class="gridform_content" colspan="'+colspan+'" rowspan="'+rowspan+'">';if(showCellNames)
html+=rc;html+='</td>';}else{html+='<td data-id="'+rc+'" class="gridform_label" style="text-align:'+labelAlign+';" rowspan="'+rowspan+'">';if(showCellNames)
html+='<small>'+rc+': '+this.settings.fields[rc].label+'</small>';html+='</td>';html+='<td data-id="'+rc+'" class="gridform_content" style="height:100%;vertical-align:top;" colspan="'+colspan+'" rowspan="'+rowspan+'">';if(showCellNames)
html+='<small>'+rc+': field '+this.settings.fields[rc].id+'</small>';html+='</td>';}}}
html+='</tr>';}}else if(this.settings.labelType==="over"){html+='<tr>';for(var c=1;c<=this.cols;c++){var contentWidth='';if(this.settings.dimensions['col_'+c]!==undefined){contentWidth=(this.settings.dimensions['col_'+c].contentWidth!==undefined)?'width:'+this.settings.dimensions['col_'+c].contentWidth:'';}
html+='<td style="'+contentWidth+'"></td>';}
html+='</tr>';for(var r=1;r<=this.rows;r++){html+='<tr>';for(var c=1;c<=this.cols;c++){var rc=r+'_'+c;if(this.settings.fields[rc]===undefined){if(spannedCells[rc]!==undefined){continue;}
html+='<td data-id="'+rc+'" class="gridform_content" rowspan="2">';if(showCellNames)
html+=rc;html+='</td>';}else{if(spannedCells[rc]!==undefined){console.error("The field '"+this.settings.fields[rc].id+"' cannot be placed at '"+rc+"'. This cell is filled by field '"+spannedCells[rc].id+"'");continue;}
var colspan=1;if(this.settings.fields[rc].colspan!==undefined){colspan=parseInt(this.settings.fields[rc].colspan,10);}
var rowspan=1;if(this.settings.fields[rc].rowspan!==undefined){rowspan=parseInt(this.settings.fields[rc].rowspan,10);}
for(var x=r;x<(r+rowspan);x++){for(var y=c;y<c+colspan;y++){if(this.settings.debug)
console.log("The cell "+x+'_'+y+" is filled by field content '"+this.settings.fields[rc].id+"'");spannedCells[x+'_'+y]=this.settings.fields[rc];}}
var labelAllowed=(gridform.types[this.settings.fields[rc].type]!==undefined&&gridform.types[this.settings.fields[rc].type].labelAllowed===false)?false:true;if(this.settings.fields[rc].label===undefined||labelAllowed===false){html+='<td data-id="'+rc+'" class="gridform_content" colspan="'+colspan+'" rowspan="'+(rowspan*2)+'">';if(showCellNames)
html+=rc;html+='</td>';}else{html+='<td data-id="'+rc+'" class="gridform_label" style="text-align:'+labelAlign+';" colspan="'+colspan+'">';if(showCellNames)
html+='<small>'+rc+': '+this.settings.fields[rc].label+'</small>';html+='</td>';}}}
html+='</tr>';html+='<tr>';for(var c=1;c<=this.cols;c++){var rc=r+'_'+c;if(this.settings.fields[rc]!==undefined){if(spannedCells[rc]!==undefined&&this.settings.fields[rc]!==spannedCells[rc]){console.error("The field '"+this.settings.fields[rc].id+"' cannot be placed at '"+rc+"'. This cell is filled by field '"+spannedCells[rc].id+"'");continue;}
var labelAllowed=(gridform.types[this.settings.fields[rc].type]!==undefined&&gridform.types[this.settings.fields[rc].type].labelAllowed===false)?false:true;if(this.settings.fields[rc].label!==undefined&&labelAllowed===true){var colspan=1;if(this.settings.fields[rc].colspan!==undefined){colspan=parseInt(this.settings.fields[rc].colspan,10);}
var rowspan=1;if(this.settings.fields[rc].rowspan!==undefined){rowspan=parseInt(this.settings.fields[rc].rowspan,10);}
html+='<td data-id="'+rc+'" class="gridform_content" style="height:100%;vertical-align:top;" colspan="'+colspan+'" rowspan="'+((rowspan*2)-1)+'">';if(showCellNames)
html+='<small>'+rc+': field '+this.settings.fields[rc].id+'</small>';html+='</td>';}}}
html+='</tr>';}}
html+='</tbody></table>';return html;},__buildContents:function(debugOptions){if(debugOptions!==undefined&&debugOptions.showCellNames===true){return;}
for(var x in this.settings.fields){var type=this.settings.fields[x].type;var field=this.settings.fields[x];var cellSelectorLabel=this.settings.target+' td[data-id='+x+'].gridform_label';var cellSelectorContent=this.settings.target+' td[data-id='+x+'].gridform_content';if(gridform.types[type]==undefined){console.error("No type "+type+" is known?!");}
if(gridform.types[type]!==undefined&&typeof gridform.types[type]['setLabel']==="function"){var html=gridform.types[type]['setLabel'](field,cellSelectorLabel,this);if(typeof html==="string"){$(cellSelectorLabel).html(html);}}else{console.error("No setLabel function for type "+type);}
if(gridform.types[type]!==undefined&&typeof gridform.types[type]['render']==="function"){var html=gridform.types[type]['render'](field,cellSelectorContent,this);if(typeof html==="string"){$(cellSelectorContent).html(html);}}else{console.error("No rendering function for type "+type);}
if(this.focusOnField!==null){this.getElement(this.focusOnField).focus();}
if(gridform.types[type]!==undefined&&typeof gridform.types[type]['afterDOMCreation']==="function"){gridform.types[type]['afterDOMCreation'](field,cellSelectorContent,this);}
var that=this;if(field.validateOnBlur===true&&(field.mandatory===true||typeof field.validate==="function")){var elem=this.getElement(field.id);(function(id){elem.on("blur",function(){that.validate(id);});})(field.id);}}},setData:function(record){for(var x in record){if(this.fieldsById[x]===undefined){console.error("No field with id "+x+", so I can set the data!");}else{var type=this.fieldsById[x].type;var field=this.fieldsById[x];var cellSelector=this.settings.target+' td[data-id='+field.row+'_'+field.col+'].gridform_content';if(gridform.types[type]!==undefined&&typeof gridform.types[type]['set']==="function"){gridform.types[type]['set'](this.fieldsById[x],record[x],cellSelector,this);}else{console.error("No set function for type "+type);}}}},switchMode:function(mode){if(mode!=="edit"&&mode!=="view")
return false;if(mode!==this.mode){this.settings.mode=mode;this.render();}},getElement:function(id){var field=this.fieldsById[id];if(field===undefined)
return false;var cellSelectorContent=this.settings.target+' td[data-id='+field.row+'_'+field.col+'].gridform_content';if(gridform.types[field.type]!==undefined&&typeof gridform.types[field.type]['getFieldNode']==="function"){return gridform.types[field.type]['getFieldNode'](field,cellSelectorContent,this);}else{if(this.settings.debug)
console.log("getElement: No getFieldNode-Method for field type "+field.type);return false;}},setStatus:function(id,type,message){var field=this.fieldsById[id];if(field===undefined)
return false;this.resetFieldMarks(id);var cellSelectorLabel=this.settings.target+' td[data-id='+field.row+'_'+field.col+'].gridform_label';var cellSelectorContent=this.settings.target+' td[data-id='+field.row+'_'+field.col+'].gridform_content';if(gridform.types[field.type]!==undefined&&typeof gridform.types[field.type]['set'+type]==="function"){gridform.types[field.type]['set'+type](field,message,cellSelectorLabel,cellSelectorContent,this);}else{if(this.settings.debug)
console.log("No set"+type+"-Method for field type "+field.type);}},setSuccess:function(id){this.setStatus(id,"Success");},setWarning:function(id,message){this.setStatus(id,"Warning",message);},setError:function(id,error){this.setStatus(id,"Error",error);},setWaiting:function(id){this.setStatus(id,"Waiting");},resetFieldMarks:function(id){var that=this;function reset(id){var field=that.fieldsById[id];if(field===undefined)
return false;var cellSelectorLabel=that.settings.target+' td[data-id='+field.row+'_'+field.col+'].gridform_label';var cellSelectorContent=that.settings.target+' td[data-id='+field.row+'_'+field.col+'].gridform_content';if(gridform.types[field.type]!==undefined&&typeof gridform.types[field.type]['resetFieldMark']==="function"){gridform.types[field.type]['resetFieldMark'](field,cellSelectorLabel,cellSelectorContent,that);}else{if(this.settings.debug)
console.log("No resetFieldMark-Method for field type "+field.type);}};if(id===undefined){for(var x in this.fieldsById){reset(this.fieldsById[x].id);}}else{reset(id);}},flush:function(id){var that=this;function flush(id){that.resetFieldMarks(id);var field=that.fieldsById[id];var type=field.type;if(field===undefined)
return false;var cellSelector=that.settings.target+' td[data-id='+field.row+'_'+field.col+'].gridform_content';if(gridform.types[type]!==undefined&&typeof gridform.types[type]['flush']==="function"){gridform.types[type]['flush'](cellSelector,that);}};if(id===undefined){for(var x in this.fieldsById){flush(this.fieldsById[x].id);}}else{flush(id);}},getData:function(id){var that=this;function get(id){var field=that.fieldsById[id];var type=field.type;if(field===undefined)
return undefined;var cellSelector=that.settings.target+' td[data-id='+field.row+'_'+field.col+'].gridform_content';if(gridform.types[type]!==undefined&&gridform.types[type].containsData===false)
return undefined;if(gridform.types[type]!==undefined&&typeof gridform.types[type]['get']==="function"){return gridform.types[type]['get'](field,cellSelector);}
return undefined;};if(id===undefined){var data={};for(var x in this.fieldsById){var d=get(this.fieldsById[x].id);if(d!==undefined){data[this.fieldsById[x].id]=d;}}
return data;}else{return get(id);}},validate:function(id,callback){var that=this;function validate(id,callback,onlyOne){that.resetFieldMarks(id);var field=that.fieldsById[id];if(field===undefined)
return false;var type=field.type;if(gridform.types[type].containsData!==true)
return false;var cellSelector=that.settings.target+' td[data-id='+field.row+'_'+field.col+'].gridform_content';var valid=true;var value=that.getData(field.id);if(field.mandatory===true&&(value===""||value===null||value===undefined||(typeof value==="object"&&value.length===0))){that.setError(id,that.settings.language.mandatoryField);that.valid=false;valid=false;that.validated++;if(that.settings.debug)
console.log("Validated: "+that.validated+" / "+that.fieldCount+" => "+field.id);if(onlyOne===true||that.fieldCount==that.validated){if(onlyOne===true){that.enable(true,id);if(that.settings.debug)
console.log("Validated field "+id+" to "+valid);}else{that.enable(true);if(that.settings.debug)
console.log("Validated form to "+that.valid);}
if(typeof callback==="function"){if(that.settings.debug)
console.log("ready with validating");callback(valid);}}
return;}
if(typeof field.validate==="function"){that.setWaiting(field.id);var value=that.getData(id);field.validate(value,function(valid){if($(cellSelector).find("div.form-group").data("status")==="waiting"){that.resetFieldMarks(field.id);if(that.settings.mode==="edit"){that.enable(true,field.id);}}
if(valid===true){that.setSuccess(id);}else{that.setError(id,valid);that.valid=false;}
that.validated++;if(that.settings.debug)
console.log("Validated: "+that.validated+" / "+that.fieldCount+" => "+field.id);if(onlyOne===true||that.fieldCount==that.validated){if(onlyOne===true){that.enable(true,id);if(that.settings.debug)
console.log("Validated field "+id+" to "+valid);$(gridform.forms[that.settings.name]).trigger("validated",[{id:valid}]);}else{that.enable(true);if(that.settings.debug)
console.log("Validated form to "+that.valid);$(gridform.forms[that.settings.name]).trigger("validated",[that.valid]);}
if(typeof callback==="function"){if(that.settings.debug)
console.log("Validated: "+that.validated+" / "+that.fieldCount+" => "+field.id);callback(that.valid);}}});}else{if(gridform.types[type]!==undefined&&typeof gridform.types[type]['validate']==="function"){var valid=gridform.types[type]['validate'](field,cellSelector);if(valid!==true){if(that.settings.debug)
console.log(valid);that.setError(id,valid);that.valid=false;}}
that.setSuccess(id);that.validated++;if(that.settings.debug)
console.log("Validated: "+that.validated+" / "+that.fieldCount+" => "+field.id);if(onlyOne===true||that.fieldCount==that.validated){if(onlyOne===true){that.enable(true,id);if(that.settings.debug)
console.log("Validated field "+id+" to "+valid);$(gridform.forms[that.settings.name]).trigger("validated",[{id:that.valid}]);}else{that.enable(true);if(that.settings.debug)
console.log("Validated form to "+that.valid);$(gridform.forms[that.settings.name]).trigger("validated",[that.valid]);}
if(typeof callback==="function"){if(that.settings.debug)
console.log("ready with validating");callback(that.valid);}}}};this.valid=true;this.validated=0;if(id===undefined){this.enable(false);for(var x in this.fieldsById){validate(this.fieldsById[x].id,callback);}}else{this.enable(false,id);validate(id,callback,true);}},enable:function(enable,id){if(this.settings.mode!=="edit")
return false;var that=this;function enableField(enable,id){var field=that.fieldsById[id];if(field===undefined)
return false;var type=field.type;var cellSelector=that.settings.target+' td[data-id='+field.row+'_'+field.col+'].gridform_content';if(gridform.types[type]!==undefined&&typeof gridform.types[type]['enable']==="function"){gridform.types[type]['enable'](field,enable,cellSelector);}};if(id===undefined){for(var x in this.fieldsById){enableField(enable,this.fieldsById[x].id);}}else{enableField(enable,id);}}};gridform.setDefaults=function(settings){gridform.form.prototype.defaultSettings=$.extend({},gridform.form.prototype.defaultSettings,settings);};$.fn.gridform=function(settings){if(gridform.forms[settings.name]!==undefined){console.error("A form with the name '"+settings.name+"' already exists!");}
var obj=new gridform.form(settings);if(obj===false)
return false;if($(this).length===1)
obj.render(this);if(settings.name!==undefined){gridform.forms[settings.name]=obj;}
return obj;};}(jQuery));